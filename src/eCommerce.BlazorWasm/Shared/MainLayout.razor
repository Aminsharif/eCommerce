@using Blazored.LocalStorage
@using MudBlazor
@using eCommerce.BlazorWasm.Services
@using eCommerce.Core.Models
@inherits LayoutComponentBase
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<MudThemeProvider @bind-IsDarkMode="_isDarkMode" Theme="_theme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">eCommerce Platform</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Brightness4" Color="Color.Inherit" OnClick="@(async (e) => await ToggleDarkMode())" />
        <AuthorizeView>
            <Authorized Context="mainMenuContext">
                <MudMenu 
                        Icon="@Icons.Material.Filled.Person" 
                        Color="Color.Inherit"
                        AnchorOrigin="Origin.BottomLeft"  
                        TransformOrigin="Origin.TopLeft"  
                    >
                        <!-- Common menu items for all authenticated users -->
                        <MudMenuItem OnClick="@(async () => await Logout())">Logout</MudMenuItem>
                        
                        <!-- Customer specific menu items -->
                        <AuthorizeView Roles="@UserRole.Customer.ToString()">
                            <Authorized Context="customerMenuContext">
                                <MudMenuItem Href="/account/profile">Profile</MudMenuItem>
                                <MudMenuItem Href="/account/orders">Orders</MudMenuItem>
                                <MudMenuItem Href="/account/wishlist">Wishlist</MudMenuItem>
                            </Authorized>
                        </AuthorizeView>
                        
                        <!-- Admin specific menu items -->
                    <AuthorizeView Roles="@UserRole.Admin.ToString()">
                        <Authorized Context="adminMenu">
                                <MudMenuItem Href="/admin/dashboard">Admin Dashboard</MudMenuItem>
                                <MudMenuItem Href="/admin/settings">Admin Settings</MudMenuItem>
                            </Authorized>
                        </AuthorizeView>
                        
                        <!-- Vendor specific menu items -->
                    <AuthorizeView Roles="@UserRole.Vendor.ToString()">
                            <Authorized Context="vendorMenu">
                                <MudMenuItem Href="/vendor/dashboard">Vendor Dashboard</MudMenuItem>
                                <MudMenuItem Href="/vendor/products">My Products</MudMenuItem>
                            </Authorized>
                        </AuthorizeView>
                    </MudMenu>
            </Authorized>
            <NotAuthorized>
                <MudButton Href="/login" Variant="Variant.Text" Color="Color.Inherit">Login</MudButton>
                <MudButton Href="/register" Variant="Variant.Text" Color="Color.Inherit">Register</MudButton>
            </NotAuthorized>
        </AuthorizeView>
        <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" Color="Color.Inherit" Href="/cart" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">eCommerce Platform</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="my-4 pt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode;
    private MudTheme _theme = new MudTheme();

    protected override async Task OnInitializedAsync()
    {
        // Load dark mode preference from local storage
        var darkModePreference = await LocalStorage.GetItemAsync<bool?>("darkMode");
        _isDarkMode = darkModePreference ?? false;
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task ToggleDarkMode()
    {
        _isDarkMode = !_isDarkMode;
        await LocalStorage.SetItemAsync("darkMode", _isDarkMode);
    }

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        var authStateProvider = (CustomAuthStateProvider)AuthenticationStateProvider;
        authStateProvider.NotifyUserLogout();
        NavigationManager.NavigateTo("/");
    }
}