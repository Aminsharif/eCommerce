@page "/cart"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Shopping Cart - eCommerce Platform</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudBreadcrumbs Items="_breadcrumbs" />
    <MudText Typo="Typo.h4" Class="mb-4">Shopping Cart</MudText>

    @if (_isLoading)
    {
        <MudGrid>
            @for (int i = 0; i < 3; i++)
            {
                <MudItem xs="12">
                    <MudPaper Class="pa-4 mb-4">
                        <MudGrid>
                            <MudItem xs="12" sm="3">
                                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="120px" Width="100%" />
                            </MudItem>
                            <MudItem xs="12" sm="9">
                                <MudSkeleton Width="60%" Height="28px" />
                                <MudSkeleton Width="40%" Class="mt-2" />
                                <MudSkeleton Width="20%" Class="mt-4" />
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
    }
    else if (_cart?.Items != null && _cart.Items.Any())
    {
        <MudGrid>
            <MudItem xs="12" md="8">
                @foreach (var item in _cart.Items)
                {
                    <MudPaper Class="pa-4 mb-4" Elevation="2">
                        <MudGrid>
                            <MudItem xs="12" sm="3">
                                <MudImage Src="@(item.Product.Images.FirstOrDefault() ?? "/images/no-image.png")" 
                                         Alt="@item.Product.Name"
                                         Style="width: 100%;"
                                         Height="120" 
                                         ObjectFit="ObjectFit.Cover" 
                                         Class="rounded" />
                            </MudItem>
                            <MudItem xs="12" sm="9">
                                <div class="d-flex justify-space-between align-center">
                                    <MudText Typo="Typo.h6">@item.Product.Name</MudText>
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                  Color="Color.Error" 
                                                  OnClick="() => RemoveFromCart(item.Product.Id)" />
                                </div>
                                <MudText Typo="Typo.body2" Color="Color.Primary" Class="mb-2">@item.Product.Brand</MudText>
                                <div class="d-flex align-center mb-4">
                                    @if (item.Product.DiscountPrice.HasValue)
                                    {
                                        <MudText Typo="Typo.body1" Class="mr-2"><strong>$@item.Product.DiscountPrice.Value.ToString("F2")</strong></MudText>
                                        <MudText Typo="Typo.body2" Style="text-decoration: line-through;" Color="Color.Error">$@item.Product.Price.ToString("F2")</MudText>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.body1"><strong>$@item.Product.Price.ToString("F2")</strong></MudText>
                                    }
                                </div>
                                <div class="d-flex align-center">
                                    <MudNumericField @bind-Value:get="item.Quantity" 
                                                   @bind-Value:set="@(async (int value) => { item.Quantity = value; await UpdateQuantity(item.Product.Id, value); })" 
                                                   Label="Quantity" 
                                                   Min="1" 
                                                   Max="10" 
                                                   Class="mr-4" 
                                                   Style="width: 100px;" />
                                    <MudText Typo="Typo.body1" Class="ml-auto"><strong>Total: $@(((item.Product.DiscountPrice ?? item.Product.Price) * item.Quantity).ToString("F2"))</strong></MudText>
                                </div>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                }
            </MudItem>
            
            <MudItem xs="12" md="4">
                <MudPaper Class="pa-4" Elevation="2">
                    <MudText Typo="Typo.h6" Class="mb-4">Order Summary</MudText>
                    
                    <div class="d-flex justify-space-between mb-2">
                        <MudText>Subtotal:</MudText>
                        <MudText><strong>$@_cart.Subtotal.ToString("F2")</strong></MudText>
                    </div>
                    
                    @if (_cart.DiscountAmount > 0)
                    {
                        <div class="d-flex justify-space-between mb-2">
                            <MudText>Discount:</MudText>
                            <MudText Color="Color.Error">-$@_cart.DiscountAmount.ToString("F2")</MudText>
                        </div>
                    }
                    
                    <div class="d-flex justify-space-between mb-4">
                        <MudText>Shipping:</MudText>
                        <MudText>$@_cart.ShippingCost.ToString("F2")</MudText>
                    </div>
                    
                    <MudDivider Class="mb-4" />
                    
                    <div class="d-flex justify-space-between mb-6">
                        <MudText Typo="Typo.h6">Total:</MudText>
                        <MudText Typo="Typo.h6" Color="Color.Primary"><strong>$@_cart.Total.ToString("F2")</strong></MudText>
                    </div>
                    
                    <MudTextField @bind-Value="_promoCode" 
                                 Label="Promo Code" 
                                 Variant="Variant.Outlined" 
                                 Class="mb-4" />
                    
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Secondary" 
                              FullWidth="true" 
                              OnClick="ApplyPromoCode" 
                              Class="mb-4">Apply Promo Code</MudButton>
                    
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              Size="Size.Large" 
                              FullWidth="true" 
                              OnClick="ProceedToCheckout">Proceed to Checkout</MudButton>
                </MudPaper>
            </MudItem>
        </MudGrid>
    }
    else
    {
        <MudPaper Class="pa-6 text-center" Elevation="0">
            <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Size="Size.Large" Class="mb-4" />
            <MudText Typo="Typo.h6">Your cart is empty</MudText>
            <MudText Typo="Typo.body1" Class="mt-2">Add some products to your cart and they will appear here</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Link="/products" Class="mt-4">Continue Shopping</MudButton>
        </MudPaper>
    }
</MudContainer>

@code {
    private CartDto? _cart;
    private bool _isLoading = true;
    private string _promoCode = string.Empty;
    private List<BreadcrumbItem> _breadcrumbs = new()
    {
        new BreadcrumbItem("Home", "/"),
        new BreadcrumbItem("Cart", null, disabled: true)
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadCartAsync();
    }

    private async Task LoadCartAsync()
    {
        try
        {
            _cart = await Http.GetFromJsonAsync<CartDto>("api/cart");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading cart: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task UpdateQuantity(int productId, int quantity)
    {
        try
        {
            await Http.PutAsync($"api/cart/update/{productId}?quantity={quantity}", null);
            await LoadCartAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating quantity: {ex.Message}", Severity.Error);
        }
    }

    private async Task RemoveFromCart(int productId)
    {
        try
        {
            await Http.DeleteAsync($"api/cart/remove/{productId}");
            await LoadCartAsync();
            Snackbar.Add("Product removed from cart", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error removing product: {ex.Message}", Severity.Error);
        }
    }

    private async Task ApplyPromoCode()
    {
        if (string.IsNullOrWhiteSpace(_promoCode))
        {
            Snackbar.Add("Please enter a promo code", Severity.Warning);
            return;
        }

        try
        {
            await Http.PostAsync($"api/cart/promo/{_promoCode}", null);
            await LoadCartAsync();
            Snackbar.Add("Promo code applied successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error applying promo code: {ex.Message}", Severity.Error);
        }
    }

    private void ProceedToCheckout()
    {
        NavigationManager.NavigateTo("/checkout");
    }

    private class CartDto
    {
        public List<CartItemDto> Items { get; set; } = new();
        public decimal Subtotal { get; set; }
        public decimal DiscountAmount { get; set; }
        public decimal ShippingCost { get; set; }
        public decimal Total { get; set; }
    }

    private class CartItemDto
    {
        public ProductDto Product { get; set; } = new();
        public int Quantity { get; set; }
    }

    private class ProductDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Brand { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public decimal? DiscountPrice { get; set; }
        public List<string> Images { get; set; } = new();
    }
}