@page "/admin/dashboard"
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using Microsoft.AspNetCore.Authorization
@using eCommerce.Core.DTOs.Admin

<PageTitle>Admin Dashboard - eCommerce Platform</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <!-- Admin Navigation -->
        <MudItem xs="12" md="3">
            <MudPaper Class="pa-4" Elevation="2">
                <MudList>
                    <MudListItem Icon="@Icons.Material.Filled.Dashboard" Text="Dashboard" Href="/admin" Selected="true" />
                    <MudListItem Icon="@Icons.Material.Filled.Inventory" Text="Products" Href="/admin/products" />
                    <MudListItem Icon="@Icons.Material.Filled.ShoppingBag" Text="Orders" Href="/admin/orders" />
                    <MudListItem Icon="@Icons.Material.Filled.Category" Text="Categories" Href="/admin/categories" />
                    <MudListItem Icon="@Icons.Material.Filled.People" Text="Customers" Href="/admin/customers" />
                    <MudListItem Icon="@Icons.Material.Filled.Settings" Text="Settings" Href="/admin/settings" />
                </MudList>
            </MudPaper>
        </MudItem>

        <!-- Dashboard Content -->
        <MudItem xs="12" md="9">
            <MudGrid>
                <!-- Statistics Cards -->
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Class="pa-4" Elevation="2">
                        <div class="d-flex justify-space-between align-center">
                            <div>
                                <MudText Typo="Typo.subtitle2">Total Orders</MudText>
                                <MudText Typo="Typo.h5">@_stats.TotalOrders</MudText>
                            </div>
                            <MudIcon Icon="@Icons.Material.Filled.ShoppingBag" Color="Color.Primary" Size="Size.Large" />
                        </div>
                    </MudPaper>
                </MudItem>

                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Class="pa-4" Elevation="2">
                        <div class="d-flex justify-space-between align-center">
                            <div>
                                <MudText Typo="Typo.subtitle2">Revenue</MudText>
                                <MudText Typo="Typo.h5">$@_stats.Revenue.ToString("N2")</MudText>
                            </div>
                            <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Color="Color.Success" Size="Size.Large" />
                        </div>
                    </MudPaper>
                </MudItem>

                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Class="pa-4" Elevation="2">
                        <div class="d-flex justify-space-between align-center">
                            <div>
                                <MudText Typo="Typo.subtitle2">Products</MudText>
                                <MudText Typo="Typo.h5">@_stats.TotalProducts</MudText>
                            </div>
                            <MudIcon Icon="@Icons.Material.Filled.Inventory" Color="Color.Info" Size="Size.Large" />
                        </div>
                    </MudPaper>
                </MudItem>

                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Class="pa-4" Elevation="2">
                        <div class="d-flex justify-space-between align-center">
                            <div>
                                <MudText Typo="Typo.subtitle2">Customers</MudText>
                                <MudText Typo="Typo.h5">@_stats.TotalCustomers</MudText>
                            </div>
                            <MudIcon Icon="@Icons.Material.Filled.People" Color="Color.Warning" Size="Size.Large" />
                        </div>
                    </MudPaper>
                </MudItem>

                <!-- Recent Orders -->
                <MudItem xs="12">
                    <MudPaper Class="pa-4" Elevation="2">
                        <div class="d-flex justify-space-between align-center mb-4">
                            <MudText Typo="Typo.h6">Recent Orders</MudText>
                            <MudButton Variant="Variant.Text" Color="Color.Primary" Href="/admin/orders">View All</MudButton>
                        </div>
                        @if (_isLoading)
                        {
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                        }
                        else if (_recentOrders != null && _recentOrders.Any())
                        {
                            <MudTable Items="_recentOrders" Dense="true" Hover="true" Breakpoint="Breakpoint.Sm">
                                <HeaderContent>
                                    <MudTh>Order #</MudTh>
                                    <MudTh>Customer</MudTh>
                                    <MudTh>Date</MudTh>
                                    <MudTh>Status</MudTh>
                                    <MudTh>Total</MudTh>
                                    <MudTh></MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Order #">@context.OrderNumber</MudTd>
                                    <MudTd DataLabel="Customer">@context.CustomerName</MudTd>
                                    <MudTd DataLabel="Date">@context.OrderDate.ToLocalTime().ToString("MMM dd, yyyy")</MudTd>
                                    <MudTd DataLabel="Status">
                                        <MudChip Color="@GetStatusColor(context.Status)" Size="Size.Small">@context.Status</MudChip>
                                    </MudTd>
                                    <MudTd DataLabel="Total">$@context.Total.ToString("F2")</MudTd>
                                    <MudTd>
                                        <MudButton Variant="Variant.Text" Color="Color.Primary" Link="@($"/admin/orders/{context.Id}")">View</MudButton>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        }
                        else
                        {
                            <MudText>No recent orders found.</MudText>
                        }
                    </MudPaper>
                </MudItem>

                <!-- Low Stock Products -->
                <MudItem xs="12" sm="6">
                    <MudPaper Class="pa-4" Elevation="2">
                        <div class="d-flex justify-space-between align-center mb-4">
                            <MudText Typo="Typo.h6">Low Stock Products</MudText>
                            <MudButton Variant="Variant.Text" Color="Color.Primary" Href="/admin/products?filter=low-stock">View All</MudButton>
                        </div>
                        @if (_isLoading)
                        {
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                        }
                        else if (_lowStockProducts != null && _lowStockProducts.Any())
                        {
                            <MudList Dense="true">
                                @foreach (var product in _lowStockProducts)
                                {
                                    <MudListItem>
                                        <div class="d-flex justify-space-between align-center">
                                            <div>
                                                <MudText Typo="Typo.body1">@product.Name</MudText>
                                                <MudText Typo="Typo.caption" Color="Color.Error">Stock: @product.StockQuantity</MudText>
                                            </div>
                                            <MudButton Variant="Variant.Text" Color="Color.Primary" Link="@($"/admin/products/{product.Id}")">Update</MudButton>
                                        </div>
                                    </MudListItem>
                                }
                            </MudList>
                        }
                        else
                        {
                            <MudText>No low stock products found.</MudText>
                        }
                    </MudPaper>
                </MudItem>

                <!-- Recent Activities -->
                <MudItem xs="12" sm="6">
                    <MudPaper Class="pa-4" Elevation="2">
                        <MudText Typo="Typo.h6" Class="mb-4">Recent Activities</MudText>
                        @if (_isLoading)
                        {
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                        }
                        else if (_recentActivities != null && _recentActivities.Any())
                        {
                            <MudTimeline>
                                @foreach (var activity in _recentActivities)
                                {
                                    <MudTimelineItem Color="@GetActivityColor(activity.Type)" Size="Size.Small">
                                        <ItemContent>
                                            <MudText Typo="Typo.body1">@activity.Description</MudText>
                                            <MudText Typo="Typo.caption">@activity.Timestamp.ToLocalTime().ToString("MMM dd, yyyy HH:mm")</MudText>
                                        </ItemContent>
                                    </MudTimelineItem>
                                }
                            </MudTimeline>
                        }
                        else
                        {
                            <MudText>No recent activities found.</MudText>
                        }
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private async Task<T> HandleApiCall<T>(string endpoint) where T : new()
    {
        try
        {
            var response = await Http.GetAsync(endpoint);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<T>() ?? new T();
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"API Error ({endpoint}): {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading {endpoint}: {ex.Message}", Severity.Error);
        }
        return new T();
    }

    private bool _isLoading = true;
    private DashboardStatsDto _stats = new();
    private List<OrderDto> _recentOrders = new();
    private List<ProductDto> _lowStockProducts = new();
    private List<ActivityDto> _recentActivities = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardDataAsync();
    }

    private async Task LoadDashboardDataAsync()
    {
        try
        {
            _stats = await HandleApiCall<DashboardStatsDto>("api/admin/dashboard/stats");
            _recentOrders = await HandleApiCall<List<OrderDto>>("api/admin/orders/recent");
            _lowStockProducts = await HandleApiCall<List<ProductDto>>("api/admin/products/low-stock");
            _recentActivities = await HandleApiCall<List<ActivityDto>>("api/admin/activities");
            _recentOrders = await Http.GetFromJsonAsync<List<OrderDto>>("api/admin/orders/recent") ?? new();
            _lowStockProducts = await Http.GetFromJsonAsync<List<ProductDto>>("api/admin/products/low-stock");
            _recentActivities = await Http.GetFromJsonAsync<List<ActivityDto>>("api/admin/activities");
            
            if (_lowStockProducts == null) _lowStockProducts = new();
            if (_recentActivities == null) _recentActivities = new();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading dashboard data: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private Color GetStatusColor(string status) => status.ToLower() switch
    {
        "completed" => Color.Success,
        "processing" => Color.Info,
        "shipped" => Color.Primary,
        "cancelled" => Color.Error,
        _ => Color.Default
    };

    private Color GetActivityColor(string type) => type.ToLower() switch
    {
        "order" => Color.Primary,
        "product" => Color.Info,
        "customer" => Color.Warning,
        "system" => Color.Default,
        _ => Color.Default
    };

    private class DashboardStatsDto
    {
        public int TotalOrders { get; set; }
        public decimal Revenue { get; set; }
        public int TotalProducts { get; set; }
        public int TotalCustomers { get; set; }
    }

    private class OrderDto
    {
        public int Id { get; set; }
        public string OrderNumber { get; set; } = string.Empty;
        public string CustomerName { get; set; } = string.Empty;
        public DateTime OrderDate { get; set; }
        public string Status { get; set; } = string.Empty;
        public decimal Total { get; set; }
    }

    private class ProductDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public int StockQuantity { get; set; }
    }

    private class ActivityDto
    {
        public string Type { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public DateTime Timestamp { get; set; }
    }
}