@page "/account/orders"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>My Orders - eCommerce Platform</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudGrid>
        <!-- Account Navigation -->
        <MudItem xs="12" md="3">
            <MudPaper Class="pa-4" Elevation="2">
                <MudList>
                    <MudListItem Icon="@Icons.Material.Filled.Dashboard" Text="Dashboard" Href="/account" />
                    <MudListItem Icon="@Icons.Material.Filled.ShoppingBag" Text="Orders" Href="/account/orders" Selected="true" />
                    <MudListItem Icon="@Icons.Material.Filled.Favorite" Text="Wishlist" Href="/account/wishlist" />
                    <MudListItem Icon="@Icons.Material.Filled.Person" Text="Profile" Href="/account/profile" />
                    <MudListItem Icon="@Icons.Material.Filled.Settings" Text="Preferences" Href="/account/preferences" />
                    <MudListItem Icon="@Icons.Material.Filled.ExitToApp" Text="Logout" OnClick="Logout" />
                </MudList>
            </MudPaper>
        </MudItem>

        <!-- Orders Content -->
        <MudItem xs="12" md="9">
            <MudPaper Class="pa-4" Elevation="2">
                <MudText Typo="Typo.h5" Class="mb-4">My Orders</MudText>

                <!-- Filters -->
                <MudGrid Class="mb-4">
                    <MudItem xs="12" sm="4">
                        <MudDateRangePicker @bind-DateRange="_dateRange" Label="Order Date" Class="mt-0" />
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudSelect T="string" @bind-Value="_selectedStatus" Label="Order Status">
                            <MudSelectItem Value="@((string)null)">All Statuses</MudSelectItem>
                            @foreach (var status in _orderStatuses)
                            {
                                <MudSelectItem Value="@status">@status</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudTextField @bind-Value="_searchQuery" Label="Search Orders" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" />
                    </MudItem>
                </MudGrid>

                @if (_isLoading)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                }
                else if (_orders != null && _orders.Any())
                {
                    <MudTable Items="_orders" Dense="false" Hover="true" Breakpoint="Breakpoint.Sm" Loading="_isLoading"
                              Elevation="0" Filter="FilterFunc">
                        <HeaderContent>
                            <MudTh><MudTableSortLabel SortBy="new Func<OrderDto, object>(x => x.OrderNumber)">Order #</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<OrderDto, object>(x => x.OrderDate)">Date</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<OrderDto, object>(x => x.Status)">Status</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<OrderDto, object>(x => x.Total)">Total</MudTableSortLabel></MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Order #">@context.OrderNumber</MudTd>
                            <MudTd DataLabel="Date">@context.OrderDate.ToLocalTime().ToString("MMM dd, yyyy")</MudTd>
                            <MudTd DataLabel="Status">
                                <MudChip Color="@GetStatusColor(context.Status)" Size="Size.Small">@context.Status</MudChip>
                            </MudTd>
                            <MudTd DataLabel="Total">$@context.Total.ToString("F2")</MudTd>
                            <MudTd>
                                <MudButton Variant="Variant.Text" Color="Color.Primary" Link="@($"/account/orders/{context.Id}")">View Details</MudButton>
                            </MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager />
                        </PagerContent>
                    </MudTable>
                }
                else
                {
                    <MudText>No orders found.</MudText>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private bool _isLoading = true;
    private List<OrderDto> _orders = new();
    private string? _selectedStatus;
    private string _searchQuery = "";
    private DateRange _dateRange = new();
    private readonly string[] _orderStatuses = { "Processing", "Shipped", "Delivered", "Cancelled" };

    protected override async Task OnInitializedAsync()
    {
        await LoadOrdersAsync();
    }

    private async Task LoadOrdersAsync()
    {
        try
        {
            _orders = await Http.GetFromJsonAsync<List<OrderDto>>("api/orders") ?? new();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading orders: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private bool FilterFunc(OrderDto order)
    {
        if (string.IsNullOrWhiteSpace(_searchQuery) && string.IsNullOrEmpty(_selectedStatus) && 
            _dateRange.Start == null && _dateRange.End == null)
            return true;

        var matchesSearch = string.IsNullOrWhiteSpace(_searchQuery) ||
                           order.OrderNumber.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase);

        var matchesStatus = string.IsNullOrEmpty(_selectedStatus) ||
                           order.Status.Equals(_selectedStatus, StringComparison.OrdinalIgnoreCase);

        var matchesDate = (_dateRange.Start == null && _dateRange.End == null) ||
                         (order.OrderDate.Date >= (_dateRange.Start?.Date ?? DateTime.MinValue) &&
                          order.OrderDate.Date <= (_dateRange.End?.Date ?? DateTime.MaxValue));

        return matchesSearch && matchesStatus && matchesDate;
    }

    private Color GetStatusColor(string status) => status.ToLower() switch
    {
        "processing" => Color.Info,
        "shipped" => Color.Primary,
        "delivered" => Color.Success,
        "cancelled" => Color.Error,
        _ => Color.Default
    };

    private async Task Logout()
    {
        // Implement logout logic
        NavigationManager.NavigateTo("/");
    }

    private class OrderDto
    {
        public int Id { get; set; }
        public string OrderNumber { get; set; } = string.Empty;
        public DateTime OrderDate { get; set; }
        public string Status { get; set; } = string.Empty;
        public decimal Total { get; set; }
    }
}