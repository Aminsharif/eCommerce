@page "/vendor/products"
@using Microsoft.AspNetCore.Authorization
@using eCommerce.BlazorWasm.Pages.Vendor.Dialogs
@using eCommerce.Core.Enums
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@attribute [Authorize(Roles = "Vendor")]

<PageTitle>My Products - eCommerce Platform</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <!-- Vendor Navigation -->
        <MudItem xs="12" md="3">
            <MudPaper Class="pa-4" Elevation="2">
                <MudList>
                    <MudListItem Icon="@Icons.Material.Filled.Dashboard" Text="Dashboard" Href="/vendor/dashboard" />
                    <MudListItem Icon="@Icons.Material.Filled.Inventory" Text="My Products" Href="/vendor/products" Selected="true" />
                    <MudListItem Icon="@Icons.Material.Filled.ShoppingBag" Text="Orders" Href="/vendor/orders" />
                    <MudListItem Icon="@Icons.Material.Filled.Settings" Text="Settings" Href="/vendor/settings" />
                </MudList>
            </MudPaper>
        </MudItem>

        <!-- Products Content -->
        <MudItem xs="12" md="9">
            <MudPaper Class="pa-4" Elevation="2">
                <div class="d-flex justify-space-between align-center mb-4">
                    <MudText Typo="Typo.h6">My Products</MudText>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddDialog">
                        Add Product
                    </MudButton>
                </div>

                <MudTable T="ProductDto" Items="@_products" Dense="true" Hover="true" Loading="_loading"
                         LoadingProgressColor="Color.Info" Breakpoint="Breakpoint.Sm" MultiSelection="true"
                         @bind-SelectedItems="_selectedProducts">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Category</MudTh>
                        <MudTh>SKU</MudTh>
                        <MudTh>Price</MudTh>
                        <MudTh>Discount</MudTh>
                        <MudTh>Stock</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Featured</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Name">@context.Name</MudTd>
                        <MudTd DataLabel="Category">@context.CategoryName</MudTd>
                        <MudTd DataLabel="SKU">@context.SKU</MudTd>
                        <MudTd DataLabel="Price">$@context.Price.ToString("N2")</MudTd>
                        <MudTd DataLabel="Discount">
                            @if (context.DiscountPrice.HasValue)
                            {
                                <MudText Color="Color.Success">$@context.DiscountPrice.Value.ToString("N2")</MudText>
                            }
                        </MudTd>
                        <MudTd DataLabel="Stock">
                            <MudText Color="@(context.StockQuantity <= context.ReorderPoint ? Color.Error : Color.Default)">
                                @context.StockQuantity
                            </MudText>
                        </MudTd>
                        <MudTd DataLabel="Status">
                            <MudChip Color="@(context.IsActive ? Color.Success : Color.Error)" Size="Size.Small">
                                @(context.IsActive ? "Active" : "Inactive")
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Featured">
                            <MudIcon Icon="@Icons.Material.Filled.Star" Color="@(context.IsFeatured ? Color.Warning : Color.Default)" />
                        </MudTd>
                        <MudTd DataLabel="Actions">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small"
                                          OnClick="() => OpenEditDialog(context)" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                                          OnClick="() => DeleteProduct(context)" />
                            <MudIconButton Icon="@Icons.Material.Filled.Visibility" Color="Color.Info" Size="Size.Small"
                                          Href="@($"/product/{context.Id}")" Target="_blank" />
                        </MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudText>No products found</MudText>
                    </NoRecordsContent>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>
@code {
    private bool _loading = true;
    private List<ProductDto> _products = new();
    private HashSet<ProductDto> _selectedProducts = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            _loading = true;
            // TODO: Implement API call to get vendor's products
            _products = await Http.GetFromJsonAsync<List<ProductDto>>("api/vendor/products") ?? new();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error loading products", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OpenAddDialog()
    {
        var dialog = await DialogService.ShowAsync<ProductDialog1>("Add Product");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadProducts();
        }
    }

    private async Task OpenEditDialog(ProductDto product)
    {
        var parameters = new DialogParameters
        {
            { "Product", product }
        };

        var dialog = await DialogService.ShowAsync<ProductDialog1>("Edit Product", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadProducts();
        }
    }

    private async Task DeleteProduct(ProductDto product)
    {
        var confirm = await DialogService.ShowMessageBox(
            "Delete Product",
            "Are you sure you want to delete this product?",
            yesText: "Delete",
            noText: "Cancel");

        if (confirm == true)
        {
            try
            {
                await Http.DeleteAsync($"api/vendor/products/{product.Id}");
                await LoadProducts();
                Snackbar.Add("Product deleted successfully", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add("Error deleting product", Severity.Error);
            }
        }
    }

    public class ProductDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Category { get; set; } = string.Empty;
        public string CategoryName { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public decimal? DiscountPrice { get; set; }
        public string SKU { get; set; } = string.Empty;
        public int StockQuantity { get; set; }
        public int ReorderPoint { get; set; }
        public bool IsActive { get; set; }
        public bool IsFeatured { get; set; }
    }
}